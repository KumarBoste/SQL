# Rules
# 1. Always use Camel Casing
# 2. Don't use Space
# 3. If it Possible then use (_) 'Underscore'

# Step-1 :  Create Database Mydb_Data;
# Syntax : Create Database If Not Exists <DatabaseName>;
Create Database If Not Exists Mydb_Kumar;

# Step-2 : Use Database : Mydb_Kumar
# Syntax : Use <DatabaseName>;
Use Mydb_Kumar;

# Show Databases 
# Syntax : Show Databases;
Show Databases;

# Step-3 : Create Tables inside Database : Mydb_Kumar
#syntax: Create Table <TableName> (Field1 Datetype, Field2 Datatype, Field3 Datatype);
CREATE TABLE Employee (
    Id INT,
    Name VARCHAR(20),
    Age INT
);

#Checkimg Table Inside Database

Show Tables;

# Using Select Statement: Retrival of Data

#Syntax : Select * From <TableNAme>;
#Syntax: Select Field1,Field2, From <TableName>;

SELECT 
    *
FROM
    Employee;
    
    
    
# DAY-2:

#Insert Statement : Inserting the values inside Table

Insert Into Employee Values (1,'Modi',30); 
Insert Into Employee (Id,Name,Age) Values (2,'Rahul',32);

Select * From Employee;

# Using Aggregate Function with Select Statement

SELECT 
    AVG(Age) AS Average_Age
FROM
    Employee;

SELECT 
    COUNT(ID) AS Total_Count
FROM
    Employee;
    
Select Count(Distinct(Age)) As Distinct_Age
From Employee;

SELECT 
    MIN(Age) AS Minimum_Age,
    MAX(Age) AS Maximum_Age,
    AVG(Age) AS Average_Age
FROM
    Employee;
    
SELECT 
    COUNT(*) AS Total_Count
FROM
    Employee;
    
# Insert Multiple Entries in Table

Insert into Employee Values 
(3,'Amit',30),
(4,'Rohan',36),
(5,'Rihan',45),
(6,'Priti',45);

Select * From Employee;

# Using Like Operator: Like Operator is used to get the data based on filter
# Where is used for Condition : Conditional Statement : Where Clause
# 'R%':-> This will gives the output starting with letter 'R'
# '%R':-> This will gives the output ending with letter 'R'
# '[A-R]%':-> This will gives the output start with letter A and ending with letter 'R'

SELECT 
    Name
FROM
    Employee
WHERE
    Name LIKE 'R%'; 

# Exercise:
-- Q1. Calculate Average Age of People 
-- Q2. Calculate Unique Age group of People 
-- Q3. Evaluate the name of the people having age 30 
-- Q4. Calculate Count of people having age greater than 30

-- A1.
SELECT 
    AVG(Age) AS Average_Age
FROM
    Employee;

-- A2.
SELECT 
    COUNT(DISTINCT (Age)) AS Distinct_AgeGroup
FROM
    Employee;

-- A3.
SELECT 
    Name
FROM
    Employee
WHERE
    Age = 30;
    
-- A4. 
SELECT 
    COUNT(*) AS Total_Count
FROM
    Employee
WHERE
    Age > 30;
    
# Day 03:

-- Create Table : Department

Create Table Department (
id int Not Null Unique,
name varchar(20) Not Null,
location varchar(10) Not Null,
mobileno int Not Null);

# Describe Table : Describe <TableName>; or Desc <TableName>;

Describe Department;

Desc Employee;

# Alter Statement

Alter Table Department 
Modify MobileNo BigInt Not Null;

Alter Table Department
Modify Name Varchar(10) Not Null;

Alter Table Department
Modify Location Varchar(8) Not Null;

Insert into Department Values (1,'Raj','Mumbai',9870335690);

Alter Table Department
Add Column Salary Bigint Not null;

Describe Department;

Select * from Department;

Alter Table Department
Rename column Name to Department_Name;

Alter Table Department
Drop Column Salary;

Describe Department;


-- Q1. Create Database: Mydb
-- Q2. Create Table: Student_Info
-- Q3. Add the Entities inside table: Student_info
--     Student_id,Student_Name,Student_Age,Student_MobileNo,Student_Address,Domain
-- Q4. Alter the Datatype of Student id int to Varchar(7)
-- Q5. Rename Column Domain to Student_Domain
-- Q6. Check Description of Table and Insert Five Values 

-- A1. 
Create Database If Not Exists Mydb;

-- A2 & A3.
Create Table Student_info (
Student_ID int not null unique,
Student_Name varchar(10) Not Null,
Student_Age int Not Null,
Student_MobileNo BigInt Not Null,
Student_Address Text Not Null,
Domain Varchar(10) Not Null);

-- A4.
Alter Table Student_Info
Modify Student_ID Varchar(7) Not Null Unique;

-- A5.
Alter Table Student_Info
Rename Column Domain to Student_Domain;

-- Checking Description of Table: Student_Info
Describe Student_Info;

-- A6.
Insert into Student_Info Values 
('125A001','Raj',34,9000000001,'Mumbai','IT'),
('125A002','Raju',35,9000000002,'Mumbai','Finance'),
('125A003','Biju',36,9000000003,'Delhi','HR'),
('125A004','Jayesh',37,9000000004,'Pune','HR'),
('124A001','Ritesh',38,9000000005,'Pune','IT');

-- To Retrive the Information using Select Statement

Select * From Student_Info;


# DAY-4:

--  Create a Database for Comapany : ABC
CREATE DATABASE If Not Exists ABC;

-- Use Database 
Use ABC;

-- Create Three Tables : Drivers, Riders, Transactions

CREATE TABLE Drivers (
Driver_ID INT PRIMARY KEY NOT NULL UNIQUE,
Driver_Name VARCHAR(10) NOT NULL,
Driver_Age INT NOT NULL,
Driver_MobileNo INT NOT NULL,
Driver_Address VARCHAR(10) NOT NULL
);

CREATE TABLE Riders (
Rider_ID INT PRIMARY KEY NOT NULL UNIQUE,
Rider_Name VARCHAR(10) NOT NULL,
Rider_Age INT NOT NULL,
Rider_Address VARCHAR(10) NOT NULL,
Rider_MobileNo INT NOT NULL,
Rider_Gender ENUM('Male','Female','Others')
);

CREATE TABLE Transactions (
Rider_ID INT,
Driver_ID INT,
Transaction_ID INT PRIMARY KEY NOT NULL UNIQUE,
Transaction_Mode ENUM('UPI','CASH','CARD') DEFAULT ('CASH'),
Transaction_Amount BIGINT NOT NULL,
Transaction_DistanceKM INT NOT NULL,
FOREIGN KEY (Rider_Id) REFERENCES Riders (Rider_ID),
FOREIGN KEY (Driver_ID) REFERENCES Drivers (Driver_ID)
);

-- Describe <TableName>
DESCRIBE Transactions;
DESCRIBE Riders;
DESCRIBE Drivers;

-- Using Alter Statement to Change the Framework
Alter Table Drivers
Modify Driver_MobileNo BIGINT NOT NULL;

Alter Table Riders
Modify Rider_MobileNo BIGINT NOT NULL;

ALter Table Riders
Modify Rider_Gender ENUM('Male','Female','Others') NOT NULL;

Alter Table Transactions
Modify Transaction_Mode ENUM('UPI','CASH','CARD') DEFAULT ('CASH') NOT NULL;

-- Using Insert Statement
INSERT INTO Riders VALUES
(1,'Raj',24,'Mumbai',9000000001,'Male'),
(2,'Ajay',31,'Thane',9000000002,'Male'),
(3,'Vijay',32,'Mumbai',9000000003,'Male'),
(4,'Asmita',22,'Kalyan',9000000004,'Female'),
(5,'Pragati',26,'Vasai',9000000005,'Female');


INSERT INTO Drivers VALUES
(12,'Raju',30,9900000001,'Murbad'),
(2,'Biju',36,9900000002,'Thane'),
(33,'Naresh',23,9900000003,'Pune'),
(44,'Pranit',27,9800000004,'Nashik'),
(55,'Prakash',38,9870000005,'Mumbai');


INSERT INTO Transactions VALUES
(1,12,111,'UPI',3000,20),
(2,2,112,'UPI',3200,22),
(3,33,113,'CASH',3030,21),
(4,44,114,'CARD',4500,35),
(5,55,115,'CASH',4300,31);

-- Using Select Statement
SELECT * FROM Drivers;
SELECT * FROM Riders;
SELECT * FROM Transactions;

-- Q1. How many Riders are from Address : "Mumbai"
-- ANS :
SELECT COUNT(*) AS Total_Count
FROM Riders
WHERE Rider_Address = 'Mumbai';

-- Q2. What is the Average Age of people having Gender = "Male"
-- ANS :
SELECT AVG(Rider_Age) AS Average_Age
FROM Riders
WHERE Rider_Gender = 'Male';

-- Q3. Calculate the sum of Transaction_Amount having Transaction_Mode = "CASH"
-- ANS :
SELECT SUM(Transaction_Amount) AS Transaction_Sum
FROM Transactions
WHERE Transaction_Mode = 'CASH';


# DAY-05 :

SELECT * FROM Riders;

-- Update in Riders Table :
UPDATE Riders
SET Rider_Age = 35
WHERE Rider_ID = 1;

UPDATE Riders
SET Rider_Address = 'Delhi'
WHERE Rider_ID = 5;

SELECT * FROM Transactions;

-- Update in Transactions Table :
UPDATE Transactions
SET Transaction_DistanceKm = 23
WHERE Transaction_ID = 112;

SELECT * FROM Drivers;

-- Delete Column in Drivers Table :
DELETE FROM Drivers
WHERE Driver_ID = 12;


-- Q1. Create Database: PQR
-- Q2. Create Schema for Compam=ny Domain : Mozila
-- Q3. Create Tables : Employee, HR, Performance
-- Q4. Apply Insert Statement, Update Statement and Alter Tables
-- Q5. Create ER Diagram for Company


-- Q1. ANSWER
CREATE DATABASE If Not Exists XYZ;
USE XYZ;

-- Q2. ANSWER
CREATE SCHEMA Mozila;

-- Q3. ANSWER

CREATE TABLE Mozila.Employee (
Employee_Id INT PRIMARY KEY UNIQUE NOT NULL,
Employee_Name VARCHAR(10)NOT NULL,
Employee_Age INT NOT NULL,
Employee_Email VARCHAR(30)NOT NULL,
Employee_MobileNo INT NOT NULL,
Employee_Address VARCHAR(10) NOT NULL,
Employee_Gender ENUM('Male','Female','Others') NOT NULL
);

CREATE TABLE Mozila.HR (
Employee_Id INT NOT NULL,
HR_Id INT PRIMARY KEY UNIQUE NOT NULL,
HR_Name VARCHAR(10) NOT NULL,
HR_Email VARCHAR(30) NOT NULL,
FOREIGN KEY (Employee_Id) REFERENCES Mozila.Employee(Employee_Id));

CREATE TABLE Mozila.Performance (
Employee_Id INT NOT NULL,
HR_Id INT NOT NULL,
Salary INT NOT NULL,
Department Varchar(15) NOT NULL,
Feedback Varchar(20) NOt NUll,
Tenure date NOt NUll,
Area_of_Improvement Varchar(50) not null,
Ratings Int NOt NULL,
FOREIGN KEY (Employee_Id) REFERENCES Mozila.Employee (Employee_Id),
FOREIGN KEY (HR_Id) REFERENCES Mozila.HR (HR_Id)
);

ALTER TABLE Mozila.Employee
MODIFY Employee_MobileNo INT NOT NULL;

DESCRIBE Mozila.Employee;
DESCRIBE Mozila.HR;
DESCRIBE Mozila.Performance;

# DAY - 6 :

# DAY-1:

# Rules
# 1. Always use Camel Casing
# 2. Don't use Space
# 3. If it Possible then use (_) 'Underscore'

# Step-1 :  Create Database Mydb_Data;
# Syntax : Create Database If Not Exists <DatabaseName>;
Create Database If Not Exists Mydb_Data;

# Step-2 : Use Database : Mydb_Data
# Syntax : Use <DatabaseName>;
Use Mydb_Data;

# Show Databases 
# Syntax : Show Databases;
Show Databases;

# Step-3 : Create Tables inside Database : Mydb_Data
#syntax: Create Table <TableName> (Field1 Datetype, Field2 Datatype, Field3 Datatype);
CREATE TABLE Employee (
    Id INT,
    Name VARCHAR(20),
    Age INT
);

#Checkimg Table Inside Database

Show Tables;

# Using Select Statement: Retrival of Data

#Syntax : Select * From <TableNAme>;
#Syntax: Select Field1,Field2, From <TableName>;

SELECT 
    *
FROM
    Employee;



# DAY-2 :


# INSERT Statement : Inserting the Values inside Table 
INSERT INTO Employee Values (1,'Modi',30);
INSERT INTO Employee (Id,NAME,Age) Values (2,'Rahul',32);

SELECT * FROM Employee;

# Using Aggregate Function with Select Statement

SELECT 
    AVG(Age) AS Average_Age
FROM
    Employee;


SELECT 
    COUNT(ID) AS Total_Count
FROM
    Employee;



SELECT 
    COUNT(DISTINCT (Age)) AS Distinct_Age
FROM
    Employee;


SELECT 
    MIN(Age) AS Min_Age,   
    MAX(Age) AS Max_Age,
    AVG(Age) AS Average_Age
FROM
    Employee;
    
    
SELECT 
    COUNT(*) AS Total_Count
FROM
    Employee;
    
# Insert Multiple Entries in Table

INSERT INTO Employee VAlUES
(3,'Amit',30),
(4,'Ajay',36),
(5,'Kumar',45),
(6,'Rohit',45);

SELECT * FROM Employee;
    
# Using Like Operator : Like Operator is used to get Data Based on Filter
# Where is used for Condition : Conditional Statement : WHERE Clause
# 'R%' : -> This will gives the output Starting with letter 'R"
# '%R' : -> This will gives the output Ending with letter 'R'
# '[A-R]%' -> This will gives the output START with letter 'A' and END with letter 'R'


SELECT 
    Name
FROM
    Employee
WHERE
    Name LIKE 'R%';


# Exercise 
-- Q1. Calculate Average Age of People ?
-- Q2. Calculate Unique Age group of People ?
-- Q3. Evaluate the name of the people having age 20 ?
-- Q4. Calaculate Count of People having age greater than 30 ?

# ANSWER Q1 :
SELECT 
    AVG(Age) AS Average_Age
FROM
    Employee;



# ANSWER Q2 :
SELECT 
    COUNT(DISTINCT (Age)) AS Uniquw_Age_group
FROM
    EMployee;


#ANSWER Q3 :
SELECT 
    Name
FROM
    Employee
WHERE
    Age = 30;


# ANSWER Q4 :
SELECT 
    COUNT(*) AS Total_Count
FROM
    Employee
WHERE
    Age > 30;



# DAY 03:

-- Create Table : Department

Create Table Department (
id int Not Null Unique,
name varchar(20) Not Null,
location varchar(10) Not Null,
mobileno int Not Null);

# Describe Table : Describe <TableName>; or Desc <TableName>;

Describe Department;

Desc Employee;

# Alter Statement

Alter Table Department 
Modify MobileNo BigInt Not Null;

Alter Table Department
Modify Name Varchar(10) Not Null;

Alter Table Department
Modify Location Varchar(8) Not Null;

Insert into Department Values (1,'Raj','Mumbai',9870335690);

Alter Table Department
Add Column Salary Bigint Not null;

Describe Department;

Select * from Department;

Alter Table Department
Rename column Name to Department_Name;

Alter Table Department
Drop Column Salary;

Describe Department;


-- Q1. Create Database: Mydb
-- Q2. Create Table: Student_Info
-- Q3. Add the Entities inside table: Student_info
--     Student_id,Student_Name,Student_Age,Student_MobileNo,Student_Address,Domain
-- Q4. Alter the Datatype of Student id int to Varchar(7)
-- Q5. Rename Column Domain to Student_Domain
-- Q6. Check Description of Table and Insert Five Values 

-- A1. 
Create Database If Not Exists Mydb;

-- A2 & A3.
Create Table Student_inf (
Student_ID int not null unique,
Student_Name varchar(10) Not Null,
Student_Age int Not Null,
Student_MobileNo BigInt Not Null,
Student_Address Text Not Null,
Domain Varchar(10) Not Null);

-- A4.
Alter Table Student_Info
Modify Student_ID Varchar(7) Not Null Unique;

-- A5.
Alter Table Student_Info
Rename Column Domain to Student_Domain;

-- Checking Description of Table: Student_Info
Describe Student_Inf;

-- A6.
Insert into Student_Info Values 
('125A001','Raj',34,9000000001,'Mumbai','IT'),
('125A002','Raju',35,9000000002,'Mumbai','Finance'),
('125A003','Biju',36,9000000003,'Delhi','HR'),
('125A004','Jayesh',37,9000000004,'Pune','HR'),
('124A001','Ritesh',38,9000000005,'Pune','IT');

-- To Retrive the Information using Select Statement

Select * From Student_Info;


# DAY-4:

-- Create a Database for Company : ABC
Create DATABASE If Not Exists ABC;

-- Use Database
USE ABC;

-- Create Three Tables : Drivers, Riders, Transactions

CREATE TABLE Drivers (
    Drivers_ID INT PRIMARY KEY UNIQUE,
    Driver_Name VARCHAR(10) NOT NULL,
    Driver_Age INT NOT NULL,
    Driver_MobileNo BIGINT NOT NULL,
    Driver_Address VARCHAR(10) NOT NULL
);

CREATE TABLE Riders (
    Rider_ID INT PRIMARY KEY UNIQUE,
    Rider_Name VARCHAR(10) NOT NULL,
    Rider_Age INT NOT NULL,
    Rider_Addresss VARCHAR(10) NOT NULL,
    Rider_MobileNo INT NOT NULL,
    Rider_Gender ENUM('Male', 'female', 'Others')
);

Create table Transactions (
Rider_ID int,
Drivers_ID int,
Transaction_id int primary key not null unique,
Transaction_Mode enum('UPI','CASH','CARD') default('CASH'),
Transaction_Amount Bigint not null,
Transaction_DistanceKM int not null,
foreign key(Rider_ID) references Riders(Rider_ID),
foreign key(Drivers_ID) references Drivers(Drivers_ID)
);

-- Describe <TableName>
Describe Transactions;
Describe Drivers;
Describe Riders;

-- Using Alter Statement to Change the Framework
Alter Table Riders
Modify Rider_MobileNo bigint NOT NULL;
Alter Table Riders
modify Rider_Gender ENUM('Male', 'female', 'Others') not null;
Alter Table Transactions
Modify Transaction_Mode enum('UPI','CASH','CARD') default('CASH')not null;

-- Inseating values into the Tables : 
INSERT INTO Drivers Values 
(1,'Raj',20,9000000001,'Mumbai'),
(2,'Ajay',22,9000000002,'Kalyan'),
(3,'Vijay',24,9000000003,'Thane'),
(4,'Sujal',30,9000000004,'Pune'),
(5,'Kumar',31,9000000005,'Mumbai');

INSERT INTO Riders Values 
(11,'Salman',22,'Murbad',9900000001,'Male'),
(22,'Sharukh',26,'Mumbai',9900000002,'Male'),
(33,'Vipul',27,'Murbad',9900000003,'Others'),
(44,'Ruchita',31,'Pune',9900000004,'female'),
(55,'Sujata',35,'Mumbai',9900000005,'female');

INSERT INTO Transactions Values
(11,1,111,'UPI',2000,25),
(22,2,112,'UPI',2500,30),
(33,3,113,'CASH',4000,31),
(44,4,114,'CASH',3500,33),
(55,5,115,'CARD',3050,35);

-- Using Select Statement
SELECT * FROM Drivers;
SELECT * FROM Riders;
SELECT * FROM Transactions;

-- Q1. How Many Riders are from Address : "Mumbai"
-- ANS : 
SELECT COUNT(*) AS Total_Count
FROM Riders
WHERE Rider_Addresss = 'Mumbai';

-- Q2. What is the Average Age of People having gender ="Male"
-- ANS : 
SELECT AVG(Rider_Age) AS Average_Age
FROM Riders
WHERE Rider_Gender = 'Male';

-- Q3. Calculate the Sum of Transaction_Amount having Transaction_Mode = "CASH"
-- ANS : 
SELECT SUM(Transaction_Amount) AS Transaction_Sum
FROM Transactions
WHERE Transaction_Mode = 'CASH';






# DAY-5 :

SELECT * From Riders;

-- Update 
UPDATE Riders
SET Rider_Age = 32
WHERE Rider_ID = 11;

UPDATE Riders
SET Rider_Addresss = 'Delhi'
WHERE Rider_ID = 22;

SELECT * FROM Transactions;

UPDATE Transactions
SET Transaction_DistanceKM = 20
WHERE Transaction_id = 112;

SELECT * From Drivers;

DELETE FROM Drivers
WHERE Drivers_ID = '3';


-- Q1. Create Database: PQR
-- Q2. Create Schema for Compam=ny Domain : Mozila
-- Q3. Create Tables : Employee, HR, Performance
-- Q4. Apply Insert Statement, Update Statement and Alter Tables
-- Q5. Create ER Diagram for Company 


-- Q1.
-- ANS:
CREATE DATABASE If Not Exists PQR;
USE PQR;


-- Q2.
-- ANS:
CREATE SCHEMA Mozila;

-- Q3.
-- ANS:
CREATE TABLE Mozila.Employee (
Employee_Id INT PRIMARY KEY UNIQUE NOT NULL,
Employee_Name VARCHAR(10)NOT NULL,
Employee_Age INT NOT NULL,
Employee_Email VARCHAR(30)NOT NULL,
Employee_MobileNo INT NOT NULL,
Employee_Address VARCHAR(10) NOT NULL,
Employee_Gender ENUM('Male','Female','Others') NOT NULL
);

CREATE TABLE Mozila.HR (
Employee_Id INT NOT NULL,
HR_Id INT PRIMARY KEY UNIQUE NOT NULL,
HR_Name VARCHAR(10) NOT NULL,
HR_Email VARCHAR(30) NOT NULL,
FOREIGN KEY (Employee_Id) REFERENCES Mozila.Employee(Employee_Id));

CREATE TABLE Mozila.Performance (
Employee_Id INT NOT NULL,
HR_Id INT NOT NULL,
Salary INT NOT NULL,
Department Varchar(15) NOT NULL,
Feedback Varchar(20) NOt NUll,
Tenure date NOt NUll,
Area_of_Improvement Varchar(50) not null,
Ratings Int NOt NULL,
FOREIGN KEY (Employee_Id) REFERENCES Mozila.Employee (Employee_Id),
FOREIGN KEY (HR_Id) REFERENCES Mozila.HR (HR_Id)
);

ALTER TABLE  Mozila.Employee
Modify Employee_MobileNo BIGINT NOT NULL;

ALTER TABLE Mozila.Employee
ADD Employee_Address VARCHAR(10) NOT NULL,
ADD Employee_Gender ENUM('Male','Female','Others') NOT NULL;

ALTER TABLE Mozila.HR
ADD HR_MobileNo INT NOT NULL,
ADD HR_Age INT NOT NULL,
ADD HR_Gender ENUM('Male','Female','Others') NOT NULL;

ALTER TABLE Mozila.Employee
DROP COLUMN HR_MobileNo,
DROP COLUMN HR_Age,
DROP COLUMN HR_Gender,
DROP COLUMN HR_Email;


DESCRIBE Mozila.Employee;
DESCRIBE Mozila.HR;
DESCRIBE Mozila.Performance;









# DAY - 6 :

-- Select Statement : Group By 
-- Syntax : Select NonAggregated Columns, Aggregated Columns from <TableName> Group By NonAggregated

-- Functions in Todays Lecture :

-- GROUP BY 
-- ORDER BY 
-- DESC: Descending Order
-- ASC : Ascending Order
-- LIMIT 

SELECT * FROM Drivers;

SELECT Driver_Name, AVG(Driver_Age) AS Average_Age
FROM Drivers
GROUP BY Driver_Name
ORDER BY Driver_Age DESC
LIMIT 2;

SELECT Driver_Name ,Driver_Age , COUNT(Driver_Age)
FROM Drivers
GROUP BY Driver_Name ,Driver_Age
ORDER BY Driver_Name ASC
LIMIT 3;

SELECT COUNT(Driver_Age), AVG (Driver_Age),COUNT(*)
FROM Drivers;



SELECT * FROM Mozila.Employee;

INSERT INTO Mozila.Employee VALUES 
(1,'Raj',30,'raj@123',9000000001,'Mumbai','Male'),
(2,'Viraj',32,'Viraj@123',9000000002,'Pune','Male'),
(3,'Swati',31,'Swati@123',9000000003,'Mumbai','Female'),
(4,'Sujal',23,'Sujal@123',9000000004,'Nashik','Male'),
(5,'Sujata',34,'Sujata@123',9000000005,'Thane','Female'),
(6,'Ajay',32,'Ajay@123',9000000006,'Nashik','Male'),
(7,'Kumar',21,'Kumar@123',9000000007,'Nashik','Male'),
(8,'Sonali',30,'Sonali@123',9000000008,'Thane','Female'),
(9,'Varun',39,'Varun@123',9000000009,'Nashik','Male'),
(10,'Shubham',36,'Shubham@123',9000000011,'Nashik','Male');


SELECT * FROM Mozila.HR;

drop database pqr;
INSERT INTO Mozila.Employee VALUES 
(1,11,'Kumar','kumar@11',),
(2),
(3),
(4),
(5),
(6),
(7),
(8),
(9),
(10);


# DAY- 7 :









